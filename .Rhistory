ChurnProb <- function(Data, Cust_id){
#Check if CustomerId exists
if (Cust_id %in% final_data$CustomerId ==FALSE){
stop("The CustomerId you provided is not in the dataset")
}
#GLM
glm_churn <- glm(Exited ~ CreditScore + Gender + Age + Tenure + Balance +
NumOfProducts + HasCrCard + IsActiveMember + EstimatedSalary,
data= Data, family="binomial")
Data$Churn <- predict(glm_churn, Data, type="response")
prob <- predict(glm_churn, Data[CustomerId==Cust_id], type="response")
results <- data.frame("CustomerId"=Cust_id, "Churn_Prob"=prob)
return(results)
}
library(ChurnProb)
library(ChurnProb)
rm(list=ls())
#Set working directory
setwd("C:\\Users\\Remo_\\Dropbox\\Ausbildungen\\UZH\\Master\\FS23\\R - a non-technical introduction to big data techniques, team work and interactive visualization with\\day5")
library(ChurnProb)
ChurnProb()
install.packages("ChurnProb")
install.packages("ChurnProb")
library(ChurnProb)
#Merge the Data
final_data <- merge(d_customer, d_personal, by="CustomerId",all=TRUE)
#Set columns as factors
final_data[, c("Exited", "Gender")] <- lapply(final_data[, c("Exited", "Gender")], as.factor)
#Read in the Data
d_customer <- fread("data_customer.csv")
d_personal <- fread("data_personal.csv")
#Merge the Data
final_data <- merge(d_customer, d_personal, by="CustomerId",all=TRUE)
#Set columns as factors
final_data[, c("Exited", "Gender")] <- lapply(final_data[, c("Exited", "Gender")], as.factor)
Churn_prob(final_data, 15653251)
ChurnProb(final_data, 15653251)
library(ChurnProb)
library(ChurnProb)
#Set columns as factors
final_data[, c("Exited", "Gender")] <- lapply(final_data[, c("Exited", "Gender")], as.factor)
ChurnProb(final_data, 15653251)
ChurnProb(final_data, 156532512)
ChurnProb(final_data, 15653251)
setwd("C:\\Users\\Remo_\\OneDrive\\Dokumente\\ChurnProb")
usethis::use_testthat()
Set working directory
setwd("C:\\Users\\Remo_\\Dropbox\\Ausbildungen\\UZH\\Master\\FS23\\R - a non-technical introduction to big data techniques, team work and interactive visualization with\\day5")
#Load the packages
library(data.table)
library(lubridate)
library(shiny)
library(rsconnect)
library(leaflet)
library(shinythemes)
library(profvis)
library(microbenchmark)
library(fastmatch)
library(compiler)
library(CalculateRFM)
#Read in the Data
d_customer <- fread("data_customer.csv")
d_personal <- fread("data_personal.csv")
#Merge the Data
final_data <- merge(d_customer, d_personal, by="CustomerId",all=TRUE)
#Set columns as factors
final_data[, c("Exited", "Gender")] <- lapply(final_data[, c("Exited", "Gender")], as.factor)
#Summary
str(final_data)
summary(final_data)
#Churn Probability
glm_churn <- glm(Exited ~ CreditScore + Gender + Age + Tenure + Balance +
NumOfProducts + HasCrCard + IsActiveMember + EstimatedSalary,
data= final_data, family="binomial")
#New Column
final_data$Churn <- predict(glm_churn, final_data, type="response")
final_data[, max(Churn), CustomerId]
final_data[Churn== max(final_data$Churn), list(CustomerId, Churn)]
#Customer with highest and lowest Churn probability
ex_churn <- function(x){
max <- final_data[Churn== max(final_data$Churn), list(CustomerId, Churn)]
min <- final_data[Churn== min(final_data$Churn), list(CustomerId, Churn)]
results <- list(max, min)
return(results)
}
ex_churn(final_data)
context("Plausability")
library(testthat)
library(ChurnProb)
#Set working directory
setwd("C:\\Users\\Remo_\\Dropbox\\Ausbildungen\\UZH\\Master\\FS23\\R - a non-technical introduction to big data techniques, team work and interactive visualization with\\day5")
#Read in the Data
d_customer <- fread("data_customer.csv")
d_personal <- fread("data_personal.csv")
#Merge the Data
final_data <- merge(d_customer, d_personal, by="CustomerId",all=TRUE)
#Set columns as factors
final_data[, c("Exited", "Gender")] <- lapply(final_data[, c("Exited", "Gender")], as.factor)
test_that("Highest vs. lowest check"){
expect_equal(ChurnProb(final_data,15653251), 0.9405975)
expect_equal(ChurnProb(final_data, 15662641), 0.0119297)
}
library(testthat)
library(ChurnProb)
#Set working directory
setwd("C:\\Users\\Remo_\\Dropbox\\Ausbildungen\\UZH\\Master\\FS23\\R - a non-technical introduction to big data techniques, team work and interactive visualization with\\day5")
#Read in the Data
d_customer <- fread("data_customer.csv")
d_personal <- fread("data_personal.csv")
#Merge the Data
final_data <- merge(d_customer, d_personal, by="CustomerId",all=TRUE)
#Set columns as factors
final_data[, c("Exited", "Gender")] <- lapply(final_data[, c("Exited", "Gender")], as.factor)
test_that("Highest vs. lowest check"){
expect_equal(ChurnProb(final_data,15653251), 0.9405975)
expect_equal(ChurnProb(final_data, 15662641), 0.0119297)
}
test_that("Highest vs. lowest check"){
expect_equal(ChurnProb(final_data, 15653251), 0.9405975)
expect_equal(ChurnProb(final_data, 15662641), 0.0119297)
})
test_that("Highest vs. lowest check",{
expect_equal(ChurnProb(final_data, 15653251), 0.9405975)
expect_equal(ChurnProb(final_data, 15662641), 0.0119297)
})
max <- final_data[Churn== max(final_data$Churn), list(CustomerId, Churn)]
final_data[, max(Churn), CustomerId]
final_data[Churn== max(final_data$Churn), list(CustomerId, Churn)]
#New Column
final_data$Churn <- predict(glm_churn, final_data, type="response")
final_data[, max(Churn), CustomerId]
final_data[Churn== max(final_data$Churn), list(CustomerId, Churn)]
#Customer with highest and lowest Churn probability
ex_churn <- function(x){
max <- final_data[Churn== max(final_data$Churn), list(CustomerId, Churn)]
min <- final_data[Churn== min(final_data$Churn), list(CustomerId, Churn)]
results <- list(max, min)
return(results)
}
final_data[Churn== max(final_data$Churn), list(CustomerId, Churn)]
final_data[Churn== max(final_data$Churn)]
ChurnProb(final_data, 15653251)
expect_equal(ChurnProb(final_data, 15653251), 15653251  0.9405975)
expect_equal(ChurnProb(final_data, 15653251), 15653251, 0.9405975)
expect_equal(ChurnProb(final_data, 15653251), list(15653251, 0.9405975)
expect_equal(ChurnProb(final_data, 15662641), 0.0119297)
})
expect_equal(ChurnProb(final_data, 15653251), list(15653251, 0.9405975))
expect_equal(ChurnProb(final_data, 15653251), data.frame(15653251, 0.9405975))
expect_equal(ChurnProb(final_data, 15662641), data.frame(15662641, 0.0119297)
})
expect_equal(ChurnProb(final_data, 15662641), data.frame(15662641, 0.0119297))
Churn_prob <- function(Data, Cust_id){
#Check if CustomerId exists
if (Cust_id %in% final_data$CustomerId ==FALSE){
stop("The CustomerId you provided is not in the dataset")
}
#GLM
glm_churn <- glm(Exited ~ CreditScore + Gender + Age + Tenure + Balance +
NumOfProducts + HasCrCard + IsActiveMember + EstimatedSalary,
data= Data, family="binomial")
Data$Churn <- predict(glm_churn, Data, type="response")
prob <- predict(glm_churn, Data[CustomerId==Cust_id], type="response")
results <- data.frame("CustomerId"=Cust_id, "Churn_Prob"=prob)
print(type(results))
return(results)
}
Churn_prob(final_data, 15653251)
}
Churn_prob(final_data, 15653251)
Churn_prob <- function(Data, Cust_id){
#Check if CustomerId exists
if (Cust_id %in% final_data$CustomerId ==FALSE){
stop("The CustomerId you provided is not in the dataset")
}
#GLM
glm_churn <- glm(Exited ~ CreditScore + Gender + Age + Tenure + Balance +
NumOfProducts + HasCrCard + IsActiveMember + EstimatedSalary,
data= Data, family="binomial")
Data$Churn <- predict(glm_churn, Data, type="response")
prob <- predict(glm_churn, Data[CustomerId==Cust_id], type="response")
results <- data.frame("CustomerId"=Cust_id, "Churn_Prob"=prob)
print(typeof(results))
return(results)
}
Churn_prob(final_data, 15653251)
print(results)
Churn_prob <- function(Data, Cust_id){
#Check if CustomerId exists
if (Cust_id %in% final_data$CustomerId ==FALSE){
stop("The CustomerId you provided is not in the dataset")
}
#GLM
glm_churn <- glm(Exited ~ CreditScore + Gender + Age + Tenure + Balance +
NumOfProducts + HasCrCard + IsActiveMember + EstimatedSalary,
data= Data, family="binomial")
Data$Churn <- predict(glm_churn, Data, type="response")
prob <- predict(glm_churn, Data[CustomerId==Cust_id], type="response")
results <- data.frame("CustomerId"=Cust_id, "Churn_Prob"=prob)
print(results)
return(results)
}
Churn_prob(final_data, 15653251)
glm_churn <- glm(Exited ~ CreditScore + Gender + Age + Tenure + Balance +
NumOfProducts + HasCrCard + IsActiveMember + EstimatedSalary,
data= final_data, family="binomial")
Data$Churn <- predict(glm_churn, final_data, type="response")
final_data$Churn <- predict(glm_churn, final_data, type="response")
prob <- predict(glm_churn, Data[CustomerId==15653251], type="response")
prob <- predict(glm_churn, final_data[CustomerId==15653251], type="response")
results <- data.frame("CustomerId"=Cust_id, "Churn_Prob"=prob)
results <- data.frame("CustomerId"=15653251, "Churn_Prob"=prob)
View(results)
ChurnProb(final_data, 15653251)
expect_equal(ChurnProb(final_data, 15653251), list("CustomerId"=15653251, "Churn_Prob"=0.9405975))
expect_equal(ChurnProb(final_data, 15662641)[2], 0.0119297)
ChurnProb(final_data, 15653251)
ChurnProb(final_data, 15653251)
str(ChurnProb(final_data, 15653251))
test_that("Highest vs. lowest check",{
expect_equal(ChurnProb(final_data, 15653251)$Churn_Prob, 0.9405975)
expect_equal(ChurnProb(final_data, 15662641)$Churn_Prob, 0.0119297)
})
expect_equal(ChurnProb(final_data, 15653251)$Churn_Prob, 0.941)
expect_equal(ChurnProb(final_data, 15662641)$Churn_Prob, 0.0119297)
test_that("Highest vs. lowest check",{
expect_equal(ChurnProb(final_data, 15653251)$Churn_Prob, 0.941)
expect_equal(ChurnProb(final_data, 15662641)$Churn_Prob, 0.0119297)
})
ChurnProb(final_data, 15653251)$Churn_Prob
expect_equal(ChurnProb(final_data, 15653251)$Churn_Prob, 0.9405975)
ChurnProb(final_data, 15653251)$Churn_Prob
expect_equal(ChurnProb(final_data, 15653251)$Churn_Prob, ChurnProb(final_data, 15653251)$Churn_Prob)
test_that("Highest vs. lowest check",{
expect_equal(ChurnProb(final_data, 15653251)$Churn_Prob, ChurnProb(final_data, 15653251)$Churn_Prob)
expect_equal(ChurnProb(final_data, 15662641)$Churn_Prob, ChurnProb(final_data, 15662641)$Churn_Prob)
})
library(ChurnProb)
